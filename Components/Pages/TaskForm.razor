@page "/tasks"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject TaskService TaskService
@using BlazorTaskManager.Data
@using BlazorTaskManager.Models;
@using BlazorTaskManager.Models.Tasks;

<div class="container">
    <h3 class="text-center mb-4">Lista zadań</h3>

    <div class="input-group mb-3">
        <input @bind="newTaskTitle" class="form-control" placeholder="Wpisz nazwę zadania..." />
        <button class="btn btn-success" @onclick="AddTask">Dodaj</button>
    </div>

    <table class="table table-striped">
        <thead class="table-dark">
            <tr>
                <th>Opis</th>
                <th class="text-center">Ukończone</th>
                <th class="text-center">Akcje</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <td>@task.Title</td>
                    <td class="text-center">
                        <input type="checkbox" checked="@task.IsCompleted" class="form-check-input"
                               @onchange="() => ToggleCompletion(task)" />
                    </td>
                    <td class="text-center">
                        <button @onclick="() => DeleteTask(task.Id)" class="btn btn-sm btn-danger">Usuń</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<TaskItem> tasks = new();
    private string newTaskTitle;
    private string userName;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
            await LoadTasks();
        }
    }

    private async Task LoadTasks()
    {
        tasks = await TaskService.GetTasksByUserAsync(userName);
        StateHasChanged();
    }

    private async Task AddTask()
    {
        await TaskService.AddSampleTaskAsync();
    }

    private async Task ToggleCompletion(TaskItem task)
    {
        task.IsCompleted = !task.IsCompleted;
        await TaskService.UpdateTaskAsync(task);
        await LoadTasks(); 
    }

    private async Task DeleteTask(int id)
    {
        await TaskService.DeleteTaskAsync(id);
        await LoadTasks(); 
    }
}
