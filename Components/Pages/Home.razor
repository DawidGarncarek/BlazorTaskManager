@page "/"
@inject TaskContext TaskContext
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@using BlazorTaskManager.Data
@using BlazorTaskManager.Models;
@using BlazorTaskManager.Models.Task;

<div class="container">
    <h3 class="text-center mb-4">📋 Lista zadań</h3>

    <table class="table table-striped">
        <thead class="table-dark">
            <tr>
                <th>Opis</th>
                <th class="text-center">Ukończone</th>
                <th class="text-center">Akcje</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks)
            {
                <tr>
                    <td>@task.Title</td>
                    <td class="text-center">
                        <input type="checkbox" checked="@task.IsCompleted" class="form-check-input"
                               @onchange="() => ToggleCompletion(task)" />
                    </td>
                    <td class="text-center">
                        <button @onclick="() => DeleteTask(task.Id)" class="btn btn-sm btn-danger">❌ Usuń</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary w-100 mt-3" @onclick="NavigateToAddTask">➕ Dodaj zadanie</button>
</div>

@code {
    private List<TaskItem> tasks = new();

    protected override void OnInitialized()
    {
        tasks = TaskContext.Tasks.ToList();
    }

    private void ToggleCompletion(TaskItem task)
    {
        task.IsCompleted = !task.IsCompleted;
        TaskContext.SaveChanges();
    }

    private void DeleteTask(int id)
    {
        var task = TaskContext.Tasks.Find(id);
        if (task != null)
        {
            TaskContext.Tasks.Remove(task);
            TaskContext.SaveChanges();
            tasks = TaskContext.Tasks.ToList();
        }
    }

    private void NavigateToAddTask()
    {
        Navigation.NavigateTo("/addtask");
    }
}
